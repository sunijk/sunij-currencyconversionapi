trigger:
  branches:
    include:
      - main
  paths:
    include:
      - CurrencyConversion.API/*
      - CurrencyConverter.Tests/*

pool:
  vmImage: 'ubuntu-latest'  # Use Windows if required: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  solution: '**/*.sln'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x' # Use .NET 8 (or your API's version)

- task: DotNetCoreCLI@2
  displayName: 'Restore Dependencies'
  inputs:
    command: 'restore'
    projects: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Run Unit & Integration Tests'
  inputs:
    command: 'test'
    projects: 'CurrencyConverter.Tests/CurrencyConverter.Tests.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'

- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Report'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(Agent.TempDirectory)/**/CodeCoverage'

- task: DotNetCoreCLI@2
  displayName: 'Publish API for Deployment'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'CurrencyConversion.API/CurrencyConversion.API.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
